#include <stdlib.h>
#include <string.h>
 
int main(){
  void print_sqlca();

  EXEC SQL BEGIN DECLARE SECTION; 
     int caCode;
     varchar caName[30];
  EXEC SQL END DECLARE SECTION;

  EXEC SQL CONNECT TO lwwtest@10.136.1.32:5432 AS myconn USER lww/lww;

  if(sqlca.sqlcode) 
  {
    printf("Connect database ERROR! sqlcode=%s\n", sqlca.sqlcode);
  }
  else
    printf("Connect database OK!\n");

    /*验证当前连接隔离级别*/
    EXEC SQL BEGIN DECLARE SECTION;
    char level[30];
    EXEC SQL END DECLARE SECTION;
    EXEC SQL SHOW default_transaction_isolation into :level;
    printf("Current transaction isolation level is \"%s\"\n", level);
    //更改隔离级别
    //EXEC SQL set default_transaction_isolation to "repeatable read"; //level:read committed; repeatable read; serializable; read uncommitted
    //EXEC SQL SHOW default_transaction_isolation into :level;
    //printf("Update transaction isolation level is \"%s\"\n", level);


  //drop表organ_ecpg
  //EXEC SQL DROP TABLE organ_ecpg;
  //新建表organ_ecpg
  //EXEC SQL CREATE TABLE organ_ecpg (orgcode int primary key not null, orgname varchar(30));

  //清空表--多程序复用表
  EXEC SQL DELETE FROM organ_ecpg;

  //插入记录
  EXEC SQL INSERT INTO organ_ecpg values (1, '机构');
  //EXEC SQL COMMIT;
  //printf("insert success, sqlca.sqlcode = %s \n", sqlca.sqlcode);

  //EXEC SQL INSERT INTO organ_ecpg values (111, 'psbc'); 
  EXEC SQL COMMIT; //ecpg编译时不加-t参数，此处需要显示提交,否则数据库内数据未更新！若此处未写后续只要出现commit均可提交成功！

 
  if(sqlca.sqlcode)
  {
    print_sqlca();
  }

  
  //读取插入的单条记录
  EXEC SQL SELECT orgcode, orgname INTO :caCode, :caName FROM organ_ecpg;
  printf("insert one record:\n orgcode = %d, orgname = %*s\n", caCode, caName.len, caName.arr); //NOTE: varchar type

  //sleep (5); //just test

  EXEC SQL UPDATE organ_ecpg SET orgname = '机构更名';
  //EXEC SQL UPDATE organ_ecpg SET orgname = 'psbc rename';
  EXEC SQL COMMIT; //ecpg编译时不加-t参数，此处需要显示提交,否则数据库内数据未更新！
  //读取update后记录
  EXEC SQL SELECT orgcode, orgname INTO :caCode, :caName FROM organ_ecpg;
  printf("after update orgname:\n orgcode = %d, orgname = %*s\n", caCode, caName.len, caName.arr); //NOTE: varchar type

  //sleep (5); //just test

  //删除表内记录
  //EXEC SQL DELETE FROM organ_ecpg;
  //EXEC SQL COMMIT; 
  //sleep (5); //just test
  //重连DB
  /*EXEC SQL DISCONNECT myconn;
  EXEC SQL CONNECT TO test@10.136.1.143:5432 USER lww/lww;
  if(sqlca.sqlcode)
  {
    printf("Connect database ERROR! sqlcode=%s\n", sqlca.sqlcode);
  }
  else
    printf("Connect database OK!\n");
 */
  

  //验证是否删除
  EXEC SQL SELECT orgcode, orgname INTO :caCode, :caName FROM organ_ecpg;
  printf("after delete:\n orgcode = %d, orgname = %*s\n", caCode, caName.len, caName.arr); //NOTE: varchar type
 
  EXEC SQL DISCONNECT all;
  return 0;
}

void print_sqlca()
{
  fprintf(stderr, "==== sqlca ====\n");
  fprintf(stderr, "sqlcode: %ld\n", sqlca.sqlcode);
  fprintf(stderr, "sqlerrm.sqlerrml: %d\n", sqlca.sqlerrm.sqlerrml);
  fprintf(stderr, "sqlerrm.sqlerrmc: %s\n", sqlca.sqlerrm.sqlerrmc);
  fprintf(stderr, "sqlerrd: %ld %ld %ld %ld %ld %ld\n", sqlca.sqlerrd[0],sqlca.sqlerrd[1],sqlca.sqlerrd[2],
  sqlca.sqlerrd[3],sqlca.sqlerrd[4],sqlca.sqlerrd[5]);
  fprintf(stderr, "sqlwarn: %d %d %d %d %d %d %d %d\n", sqlca.sqlwarn[0], sqlca.sqlwarn[1], sqlca.sqlwarn[2],
  sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5],
  sqlca.sqlwarn[6], sqlca.sqlwarn[7]);
  fprintf(stderr, "sqlstate: %5s\n", sqlca.sqlstate);
  fprintf(stderr, "===============\n");
}
